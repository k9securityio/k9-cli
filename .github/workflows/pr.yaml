name: golangci-lint
on:
  push:
    tags:
      - v*
    branches:
      - master
      - main
  pull_request:

env:
  GO_VERSION: 1.18

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  go-mod:
    name: Verify Go Module
    runs-on: ubuntu-latest
    steps:
     - name: Install Go
       uses: actions/setup-go@v2
       with:
         go-version: ${{ env.GO_VERSION }}
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Check go mod
       run: |
         go mod tidy
         git diff --exit-code go.mod

  golangci-lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Install Go
       uses: actions/setup-go@v2
       with:
         go-version: ${{ env.GO_VERSION }}
     - name: Do linting
       uses: golangci/golangci-lint-action@v3
       with:
         # Optional: version of golangci-lint to use in form of 
         #           v1.2 or v1.2.3 or `latest` to use the latest 
         #           version
         version: latest

         # Optional: golangci-lint command line arguments.
         # args: --issues-exit-code=0

         # Optional: show only new issues if it's a pull request. 
         #           The default value is `false`.
         # only-new-issues: true

         # Optional: if set to true then the all caching 
         #           functionality will be complete disabled,
         #           takes precedence over all other caching options.
         skip-cache: true

         # Optional: if set to true then the action don't cache or 
         #           restore ~/go/pkg.
         # skip-pkg-cache: true

         # Optional: if set to true then the action don't cache or 
         #           restore ~/.cache/go-build.
         # skip-build-cache: true

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Install Go
       uses: actions/setup-go@v2
       with:
         go-version: ${{ env.GO_VERSION }}
     - name: Build
       run: make build 
     #- name: Package
     #- name: Store Artifacts / Release
